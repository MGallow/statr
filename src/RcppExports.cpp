// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// logitc
arma::colvec logitc(const arma::colvec& u);
RcppExport SEXP statr_logitc(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(logitc(u));
    return rcpp_result_gen;
END_RCPP
}
// gradient_IRLS_logisticc
arma::colvec gradient_IRLS_logisticc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y, double lam, const arma::colvec& vec);
RcppExport SEXP statr_gradient_IRLS_logisticc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_IRLS_logisticc(betas, X, y, lam, vec));
    return rcpp_result_gen;
END_RCPP
}
// IRLSc
List IRLSc(const arma::mat& X, const arma::colvec& y, double lam, bool intercept, double tol, double maxit, const arma::colvec& vec);
RcppExport SEXP statr_IRLSc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP interceptSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(IRLSc(X, y, lam, intercept, tol, maxit, vec));
    return rcpp_result_gen;
END_RCPP
}
// gradient_MM_logisticc
arma::colvec gradient_MM_logisticc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y, double lam, double alpha, double gamma, const arma::colvec& vec);
RcppExport SEXP statr_gradient_MM_logisticc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_MM_logisticc(betas, X, y, lam, alpha, gamma, vec));
    return rcpp_result_gen;
END_RCPP
}
// MMc
List MMc(const arma::mat& X, const arma::colvec& y, double lam, double alpha, double gamma, bool intercept, double tol, double maxit, const arma::colvec& vec);
RcppExport SEXP statr_MMc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP interceptSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(MMc(X, y, lam, alpha, gamma, intercept, tol, maxit, vec));
    return rcpp_result_gen;
END_RCPP
}
// linearc
List linearc(const arma::mat& X, const arma::colvec& y, double lam, arma::colvec weights, bool intercept, bool kernel);
RcppExport SEXP statr_linearc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP weightsSEXP, SEXP interceptSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(linearc(X, y, lam, weights, intercept, kernel));
    return rcpp_result_gen;
END_RCPP
}
