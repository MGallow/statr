// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// kfold
arma::vec kfold(int n, int K);
RcppExport SEXP statr_kfold(SEXP nSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(kfold(n, K));
    return rcpp_result_gen;
END_RCPP
}
// CV_logisticc
List CV_logisticc(const arma::mat& X, const arma::colvec& y, const arma::colvec& lam, const arma::colvec& alpha, std::string penalty, bool intercept, std::string method, double tol, double maxit, arma::colvec vec, arma::colvec init, std::string criteria, int K);
RcppExport SEXP statr_CV_logisticc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP interceptSEXP, SEXP methodSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP, SEXP initSEXP, SEXP criteriaSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type init(initSEXP);
    Rcpp::traits::input_parameter< std::string >::type criteria(criteriaSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_logisticc(X, y, lam, alpha, penalty, intercept, method, tol, maxit, vec, init, criteria, K));
    return rcpp_result_gen;
END_RCPP
}
// CV_linearc
List CV_linearc(const arma::mat& X, const arma::colvec& y, const arma::colvec& lam, const arma::colvec& alpha, std::string penalty, arma::colvec weights, bool intercept, bool kernel, std::string method, double tol, double maxit, arma::colvec vec, arma::colvec init, int K);
RcppExport SEXP statr_CV_linearc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP weightsSEXP, SEXP interceptSEXP, SEXP kernelSEXP, SEXP methodSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP, SEXP initSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type init(initSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(CV_linearc(X, y, lam, alpha, penalty, weights, intercept, kernel, method, tol, maxit, vec, init, K));
    return rcpp_result_gen;
END_RCPP
}
// logitc
arma::colvec logitc(const arma::colvec& u);
RcppExport SEXP statr_logitc(SEXP uSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type u(uSEXP);
    rcpp_result_gen = Rcpp::wrap(logitc(u));
    return rcpp_result_gen;
END_RCPP
}
// gradient_IRLS_logisticc
arma::colvec gradient_IRLS_logisticc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y, double lam, const arma::colvec& vec);
RcppExport SEXP statr_gradient_IRLS_logisticc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_IRLS_logisticc(betas, X, y, lam, vec));
    return rcpp_result_gen;
END_RCPP
}
// IRLSc
List IRLSc(const arma::mat& X, const arma::colvec& y, double lam, std::string penalty, bool intercept, double tol, double maxit, const arma::colvec& vec, const arma::colvec& init);
RcppExport SEXP statr_IRLSc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP penaltySEXP, SEXP interceptSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(IRLSc(X, y, lam, penalty, intercept, tol, maxit, vec, init));
    return rcpp_result_gen;
END_RCPP
}
// gradient_MM_logisticc
arma::colvec gradient_MM_logisticc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y, double lam, double alpha, double gamma, const arma::colvec& vec);
RcppExport SEXP statr_gradient_MM_logisticc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_MM_logisticc(betas, X, y, lam, alpha, gamma, vec));
    return rcpp_result_gen;
END_RCPP
}
// gradient_MM_linearc
arma::colvec gradient_MM_linearc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y, double lam, double alpha, double gamma, arma::colvec weights, const arma::colvec& vec);
RcppExport SEXP statr_gradient_MM_linearc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP weightsSEXP, SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_MM_linearc(betas, X, y, lam, alpha, gamma, weights, vec));
    return rcpp_result_gen;
END_RCPP
}
// MMc
List MMc(const arma::mat& X, const arma::colvec& y, double lam, double alpha, double gamma, bool intercept, double tol, double maxit, const arma::colvec& vec, const arma::colvec& init);
RcppExport SEXP statr_MMc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP interceptSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(MMc(X, y, lam, alpha, gamma, intercept, tol, maxit, vec, init));
    return rcpp_result_gen;
END_RCPP
}
// MM_linearc
List MM_linearc(const arma::mat& X, const arma::colvec& y, double lam, double alpha, double gamma, arma::colvec weights, bool intercept, double tol, double maxit, const arma::colvec& vec, const arma::colvec& init);
RcppExport SEXP statr_MM_linearc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP gammaSEXP, SEXP weightsSEXP, SEXP interceptSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(MM_linearc(X, y, lam, alpha, gamma, weights, intercept, tol, maxit, vec, init));
    return rcpp_result_gen;
END_RCPP
}
// gradient_linearc
arma::colvec gradient_linearc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y, double lam, const arma::colvec& weights, bool intercept);
RcppExport SEXP statr_gradient_linearc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP weightsSEXP, SEXP interceptSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_linearc(betas, X, y, lam, weights, intercept));
    return rcpp_result_gen;
END_RCPP
}
// SVDc
List SVDc(const arma::mat& X, const arma::colvec& y, double lam, arma::colvec weights, bool intercept, bool kernel);
RcppExport SEXP statr_SVDc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP weightsSEXP, SEXP interceptSEXP, SEXP kernelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type kernel(kernelSEXP);
    rcpp_result_gen = Rcpp::wrap(SVDc(X, y, lam, weights, intercept, kernel));
    return rcpp_result_gen;
END_RCPP
}
// linearc
List linearc(const arma::mat& X, const arma::colvec& y, double lam, double alpha, std::string penalty, arma::colvec weights, bool intercept, bool kernel, std::string method, double tol, double maxit, arma::colvec vec, arma::colvec init);
RcppExport SEXP statr_linearc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP weightsSEXP, SEXP interceptSEXP, SEXP kernelSEXP, SEXP methodSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< bool >::type kernel(kernelSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(linearc(X, y, lam, alpha, penalty, weights, intercept, kernel, method, tol, maxit, vec, init));
    return rcpp_result_gen;
END_RCPP
}
// logisticc
List logisticc(const arma::mat& X, const arma::colvec& y, double lam, double alpha, std::string penalty, bool intercept, std::string method, double tol, double maxit, arma::colvec vec, arma::colvec init);
RcppExport SEXP statr_logisticc(SEXP XSEXP, SEXP ySEXP, SEXP lamSEXP, SEXP alphaSEXP, SEXP penaltySEXP, SEXP interceptSEXP, SEXP methodSEXP, SEXP tolSEXP, SEXP maxitSEXP, SEXP vecSEXP, SEXP initSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type lam(lamSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< std::string >::type penalty(penaltySEXP);
    Rcpp::traits::input_parameter< bool >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< std::string >::type method(methodSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    Rcpp::traits::input_parameter< double >::type maxit(maxitSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type vec(vecSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type init(initSEXP);
    rcpp_result_gen = Rcpp::wrap(logisticc(X, y, lam, alpha, penalty, intercept, method, tol, maxit, vec, init));
    return rcpp_result_gen;
END_RCPP
}
// predict_logisticc
List predict_logisticc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y);
RcppExport SEXP statr_predict_logisticc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(predict_logisticc(betas, X, y));
    return rcpp_result_gen;
END_RCPP
}
// predict_linearc
List predict_linearc(const arma::colvec& betas, const arma::mat& X, const arma::colvec& y);
RcppExport SEXP statr_predict_linearc(SEXP betasSEXP, SEXP XSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::colvec& >::type betas(betasSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type X(XSEXP);
    Rcpp::traits::input_parameter< const arma::colvec& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(predict_linearc(betas, X, y));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"statr_kfold", (DL_FUNC) &statr_kfold, 2},
    {"statr_CV_logisticc", (DL_FUNC) &statr_CV_logisticc, 13},
    {"statr_CV_linearc", (DL_FUNC) &statr_CV_linearc, 14},
    {"statr_logitc", (DL_FUNC) &statr_logitc, 1},
    {"statr_gradient_IRLS_logisticc", (DL_FUNC) &statr_gradient_IRLS_logisticc, 5},
    {"statr_IRLSc", (DL_FUNC) &statr_IRLSc, 9},
    {"statr_gradient_MM_logisticc", (DL_FUNC) &statr_gradient_MM_logisticc, 7},
    {"statr_gradient_MM_linearc", (DL_FUNC) &statr_gradient_MM_linearc, 8},
    {"statr_MMc", (DL_FUNC) &statr_MMc, 10},
    {"statr_MM_linearc", (DL_FUNC) &statr_MM_linearc, 11},
    {"statr_gradient_linearc", (DL_FUNC) &statr_gradient_linearc, 6},
    {"statr_SVDc", (DL_FUNC) &statr_SVDc, 6},
    {"statr_linearc", (DL_FUNC) &statr_linearc, 13},
    {"statr_logisticc", (DL_FUNC) &statr_logisticc, 11},
    {"statr_predict_logisticc", (DL_FUNC) &statr_predict_logisticc, 3},
    {"statr_predict_linearc", (DL_FUNC) &statr_predict_linearc, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_statr(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
